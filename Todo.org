[x] New todo list for hp15c alone, 2018-06-24
[x] adjust the lcd panel placement of digits
[x] adjust the lcd panel placement of indicators
[x] adjust the lcd indicator font
[x] figure out how to adjust fonts as the calculator resizes
[x] get rid of the 600px limit and figure out what to do instead.
[x] figure out how to keep the menubutton with the about page.
[x] figure out the adaptive break for portrait mode on phones
	keep the core 4x5 keypad
	but the [f] and [g] and [<-] and [on] are sort of
	essential to the works, and the other keys get used,too.
	The android calc is pretty neat, but swiping breaks the
	key concentration, pretty as it is.  Shifting sucks for
	accessability, you have to tab to the shift key, then tab
	to the operation, I should check with a user to see what
	they think.
	Which is pertinent because I'm thinking shift keys all the
	way for paging through the overlays.  Bottom row in the
	narrow layout is:
	[on] [f] [g] [o] [<-]
	where [on] is needed to clear errors, [f] and [g] for
	access to alternate key functions, [o] cycles through
	the overlays, [g][o] cycles in reverse.
	Adaptive break to portrait mode, and fonts that track
	the screen size, too, using vw units.
[x] reorganize the key information so that
	each key has a unique identifier which can be searched in
	code without consulting unicode.org,
	that identifier translates naturally into the actual key
	cap label by some mindless transformation,
	the key definitions are stored under the identifier,
	the key layouts are simply arrays of identifiers.
	This is partly done, cannot run manufactured strings
	through html``, at least as yet.
[x] the adaptive layout with overlay shifts produces multiple
	layouts containing the same keys in the same and/or
	different locations.  Wide and Narrow for now.
[x] Add back the aria-label's to the keys.
[x] make a separate calculator page with testing enabled, use
	a concatenation of the calculator source with the test
	source and import from that.
	No, better, import the calculator through the test code,
	so test.js imports hp15c.js, and then exports it.
	That works great, but there is an interaction between
	the calculator engines, when the test ends with 9.0000
	flashing, switching to the base gets the same flashing
	and a bunch of 8's and commas.
[o] push the emits through the redux reducer, too, so we might be
	able to get keystroke macros from redux tracing.
	Won't work as I thought, repeated emits don't register as
	changes, more discussion in _shouldRender and _onEmit.
[x] test runs 17 seconds vs 10 seconds for the original, could
	move to entirely css based display where the digit and
	decimal segments are all drawn and then hidden or displayed
	according to the digits and decimals specified.  Ie, draw
	all 8's and commas, tag each segment, then set
		segment.visibility="visible"
		segment.visibility="hidden"
	according to whether the segment is needed to draw the
	desired digit or decimal.  7 segments per digit, 2 per
	decimal, 10 positions, and the negative sign.
[x] some of the arrow symbols are missing on my Android phone.
	finding a webfont link for a math friendly font is getting
	frustrating.  Just moved to the lowest numbered unicode
	code points for arrows and they work, though they're hard
	to read.
[x] rewrote all display updating to not require any render, it
	all happens in the updateState, but there are still some
	render's slipping through.
[x] adjusted the .calc{height:100vh} from 95vh.
[x] rebuilt the icon from a screenshot, 
[x] fixed the Re<->Im keycap, which was already marked fixed.
[x] solve the keypad vs bezel alignment issue by making the keypad a grey
	rectangle aligned exactly to the bezel with no border, and then
	placing the kpd container over that with the exact size and placement
	to create the variable width border. This works nicely, with the caveat
	that %width and %height don't often have the same result, set it to look
	right at basic calculator aspect ratio.
[x] my orange CLEAR bracket is filling a triangle with black.
[x] built common/hp15c-test.js to import the common/hp15c.js through the test
	functions
[x] build two part calculator, one that imports the proper module and one that
	build the calculator interface with the module, see if the multiple
	imports share the same data space?  Suspect the multiple imports share
	the overhead of loading the source and nothing else.
[x] losing focus after unshifting the keypad. Ah, the focus is going to the
	span.btn not the in-col, the focused span gets buried when we unshift.
	Figured out how to fix, but broke lit-element finding a life cycle
	callback to use, put the callback into requestAnimationFrame for now,
	it's fairly low overhead.
[*] new list breakpoint for 2018-06-27
[ ] research accessibility and calculators some more.
[ ] map {es6,esm,es5}.hp15c.elf.org at pair.com
[ ] sniff browser capabilities and offer alternative links for older browsers
	in index.html, right next to the <noscript></noscript>.
[ ] matrix operations always act on A, B, C, D, or E, so
	[DIM] is always followed by A, B, C, D, or E
	[RESULT] is always followed by A, B, C, D, or E
	during matrix entry and recall,
	[STO] is always followed by A, B, C, D, or E
	[RCL] is always followed by A, B, C, D, or E
[ ] STO, RCL, and xâ‡„ are always followed by a register identifier
	which is a digit, a decimal followed by a digit, I for the index
	register, or (i) for indirecting through the index register
	except they can also interpolate a +, -, *, or / which combines the
	register with x, so STO + 0 sets register[0] += x, and RCL / 1 sets
	x /= register[1].
[ ] LBL, GTO, GSB take A, B, C, D, E, 0-9, and .0-.9 as labels
	GTO also accepts line numbers, 000-999
[ ] [on] doesn't clear the indicators.  Doesn't in the original
	simulator either.  Doesn't preserve continuous memory
	contents either.
[ ] hah, when programming, some commands depend on the alternate
	labelling of keys.  So [f][LBL] uses [A], [B], etc. as
	label targets, but the [A], [B], etc. are not displayed.
	So, the LBL, GTO, GSB entries need to activate the key
	labels that identify labels.
	And the registers want to see digits and decimals.
[ ] PRGM annunciator is outside the LCD on my phone.
[ ] css fix for <sub>x</sub><sup>y</sup> non-alignnment
	.nobr {
	   white-space: nowrap;
	}
	.supsub {
	   display: inline-block;
	   margin: -9em 0;
	   vertical-align: -0.55em;
	   line-height: 1.35em;
	   font-size: 70%;
	   text-align: left;
	}
	You might already have the "nobr" class as a <nobr> replacement.
	Now to express the molecular formula for sulfate, use the "supsub"
	class as follows:
	<span class="nobr">SO<span class="supsub">2-<br />4</span></span>
[ ] USER mode exchanges the unshifted and fshifted functions of the left half
	of the top row, so A, B, C, D, and E can become one stroke function calls
	so there should be an adjustment of key labels, too.
